package com.hiveworkshop.rms.ui.application;

import com.hiveworkshop.rms.ui.application.actionfunctions.CloseModel;
import com.hiveworkshop.rms.ui.icons.RMSIcons;
import com.hiveworkshop.rms.ui.preferences.SaveProfile;
import com.hiveworkshop.rms.ui.preferences.dataSourceChooser.DataSourceChooserPanel;

import javax.swing.*;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.InputStream;
import java.util.List;

public class MainFrame extends JFrame {

	public static MainFrame frame;
	public static MainPanel mainPanel;

	public MainFrame(final String title) {
		super(title);

		setBounds(0, 0, 1000, 650);
		mainPanel = ProgramGlobals.getMainPanel();
		setContentPane(mainPanel);
		setJMenuBar(ProgramGlobals.getMenuBar());
		setIconImage(RMSIcons.MAIN_PROGRAM_ICON);

		addWindowListener(new WindowAdapter() {
			@Override
			public void windowClosing(final WindowEvent e) {
				if (CloseModel.closeAll()) {
					System.exit(0);
				}
				getShutdownTimer().start();
			}
		});
		setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);

		setLocationRelativeTo(null);
		setVisible(true);
	}

	private Timer getShutdownTimer() {
		Timer timer = new Timer(10000, a -> {
			// This is meant to shut down the program process if the Frame has crashed.
			// Not sure if it will work, but it's a bit of an insurance...maybe?
//					System.out.println("isValid: " + MainFrame.this.isValid());
//					System.out.println("isVisible: " + MainFrame.this.isVisible());
//					System.out.println("getGraphics: " + MainFrame.this.getGraphics());
//					System.out.println("getRootPane: " + MainFrame.this.getRootPane());
			if(!MainFrame.this.isVisible()){
				System.exit(0);
			}
		});
		timer.setRepeats(false);
		return timer;
	}

	public static void create(final List<String> startupModelPaths) {
		frame = new MainFrame("Retera Model Studio " + getVersion());
		mainPanel.init();
		FileDialog fileDialog = new FileDialog();
		if (!startupModelPaths.isEmpty()) {
			for (final String path : startupModelPaths) {
				fileDialog.openFile(new File(path));
			}
		}
	}

	// For testing without opening any GUI.
	public static void justTestFiles(final List<String> startupModelPaths) {
		if (!startupModelPaths.isEmpty()) {
			for (final String path : startupModelPaths) {
				File file = new File(path);
				if (file.exists()) {
					System.out.println("  ~~~  Opening file: " + file + "  ~~~  ");
					ModelLoader.loadFileNoGUI(file);
				}
			}
		}
	}

	public static void create(final List<String> startupModelPaths, boolean dataPromptForced) {
		create(startupModelPaths);

		if (dataPromptForced || SaveProfile.get().getDataSources() == null) {
			DataSourceChooserPanel.showDataSourceChooser(SaveProfile.get().getDataSources());
		}
	}

	// Uses version.txt generated by modelstudio/build.gradle to set the title of the main window
	public static String getVersion() {
		String version = "v0.05 Beta Build"; // In case the file doesn't exists, and during development
		try (InputStream inputStream = MainFrame.class.getClassLoader().getResourceAsStream("version.txt")) {
			if (inputStream != null) {
				version = new String(inputStream.readAllBytes());
			}
		} catch (Exception exception) {
			exception.printStackTrace();
		}
		return version;
	}
}
